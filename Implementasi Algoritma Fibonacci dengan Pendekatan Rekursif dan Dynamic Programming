#include <iostream>
#include <chrono>
#include <vector>

unsigned long long fibonacci_rekursif(int n) {
    if (n <= 1)
        return n;
    return fibonacci_rekursif(n - 1) + fibonacci_rekursif(n - 2);
}

unsigned long long fibonacci_dp(int n) {
    if (n <= 1)
        return n;
    
    std::vector<unsigned long long> fib(n + 1);
    fib[0] = 0;
    fib[1] = 1;
    
    for (int i = 2; i <= n; ++i) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    
    return fib[n];
}

void ukur_waktu_eksekusi(int n) {
    auto mulai = std::chrono::high_resolution_clock::now();
    fibonacci_rekursif(n);
    auto selesai = std::chrono::high_resolution_clock::now();
    auto durasi_rekursif = std::chrono::duration_cast<std::chrono::microseconds>(selesai - mulai).count();
    
    mulai = std::chrono::high_resolution_clock::now();
    fibonacci_dp(n);
    selesai = std::chrono::high_resolution_clock::now();
    auto durasi_dp = std::chrono::duration_cast<std::chrono::microseconds>(selesai - mulai).count();
    
    std::cout << "n = " << n << std::endl;
    std::cout << "Durasi pendekatan rekursif: " << durasi_rekursif << " mikrodetik" << std::endl;
    std::cout << "Durasi pendekatan Dynamic Programming: " << durasi_dp << " mikrodetik" << std::endl;
}

int main() {
    std::vector<int> nilai_uji = {10, 25, 30, 40, 50};
    
    for (int n : nilai_uji) {
        ukur_waktu_eksekusi(n);
    }
    
    return 0;
}
